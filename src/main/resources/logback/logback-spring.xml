<?xml version="1.0" encoding="UTF-8"?>
<configuration>

	<!-- 콘솔로 로그를 남김 -->
	<appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<charset>UTF-8</charset>
			<!-- 로그 메시지 패턴 -->
			<Pattern>
				%d{HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg%n
			</Pattern>
		</encoder>
	</appender>

	<!-- 파일로 로그를 남김 -->
	<appender name="fileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH}\Agent.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>
				%d{HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg%n
			</Pattern>
		</encoder>
		<!-- 로그를 남기는 파일의 용량이 10M가 넘으면 이를 압축 파일로 만들고 새로 로그 파일로 만들라는 정책 -->
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>10240KB</MaxFileSize>
		</triggeringPolicy>
		<!-- 파일을 덮어쓰는 정책 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
			<FileNamePattern>${LOG_PATH}\backup\%d{yyyy-MM-dd}\Agent.%i.log.zip</FileNamePattern>
			<MinIndex>1</MinIndex>
			<MaxIndex>999</MaxIndex>
		</rollingPolicy>
	</appender>

	<!-- 에러 로그  -->
	<appender name="fileErrorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter"> 
			<level>error</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter> 
		<file>${LOG_PATH}\Agent-Error.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>
				%d{HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg%n
			</Pattern>
		</encoder>
		<!-- 로그 용량 10M가 넘으면 압축 파일 생성  -->
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>10240KB</MaxFileSize>
		</triggeringPolicy>
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
			<FileNamePattern>${LOG_PATH}\backup\%d{yyyy-MM-dd}\Agent-Error.%i.log.zip</FileNamePattern>
			<MinIndex>1</MinIndex>
			<MaxIndex>999</MaxIndex>
		</rollingPolicy>
	</appender>
		
	<logger name="jdbc" level="OFF"/>
	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다 -->
	<logger name="jdbc.sqlonly" level="OFF"/>
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다.  -->
	<logger name="jdbc.sqltiming" level="DEBUG"/>
	<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 -->
	<!-- 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.  -->
	<logger name="jdbc.audit" level="OFF"/>
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성 -->
	<logger name="jdbc.resultset" level="OFF"/>
	<!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
	<logger name="jdbc.resultsettable" level="DEBUG"/>
	<logger name="jdbc.connection" level="OFF"/>

	<!-- root는 글로벌 로거를 의미하며, 위의 logger에 해당하지 않으면 root 로거가 실행된다. -->
	<!--  1) ERROR 2) WARN 3) INFO 4) DEBUG 5) TRACE  -->
	<root level="INFO">
		<appender-ref ref="fileAppender" />
		<appender-ref ref="fileErrorAppender" />
		<appender-ref ref="consoleAppender" />
	</root>
</configuration>
